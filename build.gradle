buildscript {
    repositories {
        jcenter()
        // enable this to use snapshot versions of Gretty:
        // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}
version = '1.0'
group = 'co.tyec.layeredTestingExamples'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

sourceCompatibility = 1.7
targetCompatibility = 1.7
configurations {
    providedCompile
}

dependencies {
    //compile 'ch.qos.logback:logback-classic:1.1.3'

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.1'
    compile 'com.h2database:h2:1.4.191'
    compile 'org.flywaydb:flyway-core:4.0'
    compile 'org.eclipse.jetty:jetty-webapp:9.2.12.v20150709'

    testCompile 'org.glassfish.jersey.core:jersey-client:2.22.1'
    testCompile 'org.glassfish.jersey.test-framework:jersey-test-framework-core:2.22.1'

    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.1'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.22.1'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testCompile 'org.glassfish.hk2:hk2-testing:2.4.0-b31'
    testCompile 'org.glassfish.hk2:hk2-junitrunner:2.4.0-b31'

    // integration testing
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.52.0'
    testCompile group: 'com.paulhammant', name: 'ngwebdriver', version: '0.9.5'
}

repositories {
    mavenCentral()
}

sourceSets {
//    e2eTest {
//        java {
//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
//            srcDir file('src/e2eTest/java')
//        }
//        resources.srcDir file('src/e2eTest/resources')
//    }
    test {
        java {
            srcDirs += file('src/e2eTest/java')
            srcDirs += file('src/restTest/java')
            srcDirs += file('src/dbTest/java')
            srcDirs += file('src/installedTest/java')
        }
        resources {
            srcDirs += file('src/e2eTest/resources')
            srcDirs += file('src/restTest/resources')
            srcDirs += file('src/dbTest/resources')
            srcDirs += file('src/installedTest/resources')
        }
    }
}

gretty {
    port = 8888
}

//gretty product
product {
    port 9999
}

// Unit test
test {
    exclude "**/*E2eTest.*"
    exclude "**/*RestTest.*"
    exclude "**/*InstalledTest.*"
    //outputs.upToDateWhen { false }
}

task e2eTest(type: Test) {
    group 'verification'
    dependsOn 'test', 'restTest', 'appBeforeIntegrationTest'
    finalizedBy 'appAfterIntegrationTest'
    mustRunAfter 'test', 'restTest'
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include "**/*E2eTest.*"
}

task restTest(type: Test) {
    group 'verification'
    dependsOn 'test'
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    // include is file path in out classes output dir.
    // which is really annoying, because you don't know which sourceDir it came from
    include "**/*RestTest.*"
}

check {
    dependsOn 'e2eTest'
    dependsOn 'restTest'
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed', 'failed', 'skipped'
    }
    reports.html.destination = file("${reporting.baseDir}/${name}")
}


task installProduct(type: Copy) {
    //dependsOn 'buildAllProducts'
    from "build/output/LayeredTestingExamples"
    into "build/installTest"
}
import org.gradle.internal.os.OperatingSystem;

def startInstalledProcess() {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = ['cmd', '/c', 'start.bat']
    } else {
        commands = ['start.sh']
    }
    def processBuilder = new ProcessBuilder(commands)
    processBuilder.directory(new File("build/installTest"))
    processBuilder.start()
}

def stopInstalledProcess() {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = ['cmd', '/c', 'stop.bat']
    } else {
        commands = ['stop.sh']
    }
    def processBuilder = new ProcessBuilder(commands)
    processBuilder.directory(new File("build/installTest"))
    processBuilder.start()
}

task startInstalledProduct() {
    dependsOn 'installProduct'
    doLast {
        //stopInstalledProcess()
        startInstalledProcess()
    }
}

task stopInstalledProduct() {
    doLast {
        stopInstalledProcess()
    }
}

task testInstalledProduct(type: Test) {
    group 'verification'
    dependsOn 'installProduct', 'startInstalledProduct'
    finalizedBy 'stopInstalledProduct'
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include "**/*InstalledTest.*"

    systemProperty 'sut.propfile', 'installed_localhost.properties'
}